use crate::errors::*;
use memchr::memchr;
use sequoia_openpgp::armor;
use sequoia_openpgp::parse::{PacketParser, PacketParserResult, Parse};
use sequoia_openpgp::Packet;
use std::io::prelude::*;

#[derive(Debug, PartialEq)]
pub struct Signed {
    pub content: Vec<u8>,
    pub signature: Vec<u8>,
}

impl Signed {
    pub fn from_bytes(bytes: &[u8]) -> Result<Self> {
        let content_start = bytes
            .strip_prefix(b"-----BEGIN PGP SIGNED MESSAGE-----\n")
            .context("InRelease is expected to start with `-----BEGIN PGP SIGNED MESSAGE-----`")?;
        let mut bytes = content_start;
        while !bytes.starts_with(b"-----BEGIN PGP SIGNATURE-----\n") {
            let pos = 1 + memchr(b'\n', bytes).context("Failed to find end of signed message")?;
            bytes = &bytes[pos..];
        }
        let content = content_start[..content_start.len() - bytes.len()].to_vec();

        let mut reader = armor::Reader::from_bytes(
            bytes,
            armor::ReaderMode::Tolerant(Some(armor::Kind::Signature)),
        );

        let mut signature = Vec::new();
        reader.read_to_end(&mut signature)?;

        Ok(Signed { content, signature })
    }

    pub fn to_clear_signed(&self) -> Result<Vec<u8>> {
        let mut out = Vec::new();
        out.extend(b"-----BEGIN PGP SIGNED MESSAGE-----\n");
        out.extend(&self.content);

        let mut writer = armor::Writer::new(&mut out, armor::Kind::Signature)?;
        writer.write_all(&self.signature)?;
        writer.finalize()?;

        Ok(out)
    }
}

pub fn canonicalize(doc: &[u8]) -> Result<Vec<u8>> {
    let signed = Signed::from_bytes(doc)?;

    let mut ppr = PacketParser::from_bytes(&signed.signature)?;
    while let PacketParserResult::Some(pp) = ppr {
        let (packet, next_ppr) = pp.recurse()?;
        ppr = next_ppr;
        debug!("Found packet in signature block: {packet:?}");
        if let Packet::Signature(sig) = packet {
            for issuer in sig.get_issuers() {
                debug!("Found issuer in signature packet: {issuer:?}");
            }
        }
    }

    signed.to_clear_signed()
}

#[cfg(test)]
mod tests {
    use super::*;

    const IN_RELEASE: &[u8] = b"-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Origin: . xenial
Label: . xenial
Suite: xenial
Codename: xenial
Date: Thu, 2 Feb 2023 21:39:16 UTC
Architectures: amd64
Components: main
Description: Generated by aptly
MD5Sum:
 8550d0ce5fda03a2f3eb8c735a571bd5     4778 main/Contents-amd64.gz
 d8c35b55bc8e48e267b9ccdaf383976d       85 main/binary-amd64/Release
 2951333500c011d2b22c01de46d43223   128744 main/binary-amd64/Packages
 444ef6562bb0ffef2b40af15d2a1e10d    20921 main/binary-amd64/Packages.gz
 69ac9fed864b2f51c2a5fec9f8584724    17345 main/binary-amd64/Packages.bz2
SHA1:
 56bddab49c82340b09c4e83e469e4042061bffa4     4778 main/Contents-amd64.gz
 992cb9cd8a0af2d9ad81d2b45342656d41157202       85 main/binary-amd64/Release
 c8be9dfb45580a4ff22f5afb0bff311458ae9dd7   128744 main/binary-amd64/Packages
 0c82b553b566704273b4be3e3e08326f9ce7f936    20921 main/binary-amd64/Packages.gz
 56e0d8810a31b18c6ae46001e08948fbffb20ebb    17345 main/binary-amd64/Packages.bz2
SHA256:
 138a02cd93856c8e8ee0bfd3c558e9306607a7f0fb84609f70c566dcfe65c918     4778 main/Contents-amd64.gz
 e593f5bb98e0b6dbf5d0636ebff298b905b98a00402e2b20173fdb5da85c46d9       85 main/binary-amd64/Release
 1e1b1c2e00f0beda7787e81a4b9f838a6ff9cb9866d8f0060adfe066805e1963   128744 main/binary-amd64/Packages
 50e12a9696e82d0126328341b6e44b6fdad4459e8a53d94beb5d619d1b80c262    20921 main/binary-amd64/Packages.gz
 3498ef94ef0967a7384014c6930aea9e3604595435e3f3baf579d3388f89ad26    17345 main/binary-amd64/Packages.bz2
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCAAGBQJj3C2FAAoJENmAoXRX9vsGtugP/Rzx0JWWASJJU8Ki7NC3B725
VuwHoW7tup+LEn0RdaIfVrPPAC0fRmbg4hju7nnQofeq9NEwrCsytHDqnQCvEvp4
zz3pK7PDUW18AdYZvnI5CX4iGx7PX2hPbBUnGCRs0OY8netMVqBJbRW43hsjvkaW
ZOIl330mxXAGEC2ajRWlzef6stYILGVxuLOUunraIk+jDAU+lGZMaZHO9pqBuJ9p
MFwGCb/TR5v9f/ORtX/nl5RII59ryFoVmOdLc18d/p72zIREwCY4P4mLxDZzQMRe
EZf1RFhm/F6wl+rJx5ZVa30AmY5L9O1C7Uc/chO6hceNoJEbe9FxMumrX66yFTIv
zGTl43pZCqLFyrKzucKeW8+mljrDkoplN8K+Y33JAGTNqrQHbp+ApD4Ls40Wg7hq
KVqadABJ7W0Xiq3dF33LJYQ0raEkrEz5hEU1QCN6k+pB2FTEmDIB8AhP5wfn3C6a
3hbHljSr6DX45kIRNrLGqYv08GpglQqcNC0TNUcZpzouyW/PNsu32i66f9Uiscrk
hHJwJ3vE26AQEhNc27ghV1gkYX1ap3TkFCgg6SomZWvOkqwqdbFxtJgUWATckVqV
eE0Z2U8qNQ1V9YBouHdcVLcAEtprRSuTe5RQDohQuzoXrl6SsGgvVLATAmb/D1nu
Aee63sxMlmRBCwC+QKeH
=zXvj
-----END PGP SIGNATURE-----
";

    #[test]
    fn test_parse_signed() -> Result<()> {
        let signed = Signed::from_bytes(IN_RELEASE)?;
        assert_eq!(
            signed,
            Signed {
                content: b"Hash: SHA256

Origin: . xenial
Label: . xenial
Suite: xenial
Codename: xenial
Date: Thu, 2 Feb 2023 21:39:16 UTC
Architectures: amd64
Components: main
Description: Generated by aptly
MD5Sum:
 8550d0ce5fda03a2f3eb8c735a571bd5     4778 main/Contents-amd64.gz
 d8c35b55bc8e48e267b9ccdaf383976d       85 main/binary-amd64/Release
 2951333500c011d2b22c01de46d43223   128744 main/binary-amd64/Packages
 444ef6562bb0ffef2b40af15d2a1e10d    20921 main/binary-amd64/Packages.gz
 69ac9fed864b2f51c2a5fec9f8584724    17345 main/binary-amd64/Packages.bz2
SHA1:
 56bddab49c82340b09c4e83e469e4042061bffa4     4778 main/Contents-amd64.gz
 992cb9cd8a0af2d9ad81d2b45342656d41157202       85 main/binary-amd64/Release
 c8be9dfb45580a4ff22f5afb0bff311458ae9dd7   128744 main/binary-amd64/Packages
 0c82b553b566704273b4be3e3e08326f9ce7f936    20921 main/binary-amd64/Packages.gz
 56e0d8810a31b18c6ae46001e08948fbffb20ebb    17345 main/binary-amd64/Packages.bz2
SHA256:
 138a02cd93856c8e8ee0bfd3c558e9306607a7f0fb84609f70c566dcfe65c918     4778 main/Contents-amd64.gz
 e593f5bb98e0b6dbf5d0636ebff298b905b98a00402e2b20173fdb5da85c46d9       85 main/binary-amd64/Release
 1e1b1c2e00f0beda7787e81a4b9f838a6ff9cb9866d8f0060adfe066805e1963   128744 main/binary-amd64/Packages
 50e12a9696e82d0126328341b6e44b6fdad4459e8a53d94beb5d619d1b80c262    20921 main/binary-amd64/Packages.gz
 3498ef94ef0967a7384014c6930aea9e3604595435e3f3baf579d3388f89ad26    17345 main/binary-amd64/Packages.bz2
".to_vec(),
                signature: vec![137, 2, 28, 4, 1, 1, 8, 0, 6, 5, 2, 99, 220, 45, 133, 0, 10, 9, 16, 217, 128, 161, 116, 87, 246, 251, 6, 182, 232, 15, 253, 28, 241, 208, 149, 150, 1, 34, 73, 83, 194, 162, 236, 208, 183, 7, 189, 185, 86, 236, 7, 161, 110, 237, 186, 159, 139, 18, 125, 17, 117, 162, 31, 86, 179, 207, 0, 45, 31, 70, 102, 224, 226, 24, 238, 238, 121, 208, 161, 247, 170, 244, 209, 48, 172, 43, 50, 180, 112, 234, 157, 0, 175, 18, 250, 120, 207, 61, 233, 43, 179, 195, 81, 109, 124, 1, 214, 25, 190, 114, 57, 9, 126, 34, 27, 30, 207, 95, 104, 79, 108, 21, 39, 24, 36, 108, 208, 230, 60, 157, 235, 76, 86, 160, 73, 109, 21, 184, 222, 27, 35, 190, 70, 150, 100, 226, 37, 223, 125, 38, 197, 112, 6, 16, 45, 154, 141, 21, 165, 205, 231, 250, 178, 214, 8, 44, 101, 113, 184, 179, 148, 186, 122, 218, 34, 79, 163, 12, 5, 62, 148, 102, 76, 105, 145, 206, 246, 154, 129, 184, 159, 105, 48, 92, 6, 9, 191, 211, 71, 155, 253, 127, 243, 145, 181, 127, 231, 151, 148, 72, 35, 159, 107, 200, 90, 21, 152, 231, 75, 115, 95, 29, 254, 158, 246, 204, 132, 68, 192, 38, 56, 63, 137, 139, 196, 54, 115, 64, 196, 94, 17, 151, 245, 68, 88, 102, 252, 94, 176, 151, 234, 201, 199, 150, 85, 107, 125, 0, 153, 142, 75, 244, 237, 66, 237, 71, 63, 114, 19, 186, 133, 199, 141, 160, 145, 27, 123, 209, 113, 50, 233, 171, 95, 174, 178, 21, 50, 47, 204, 100, 229, 227, 122, 89, 10, 162, 197, 202, 178, 179, 185, 194, 158, 91, 207, 166, 150, 58, 195, 146, 138, 101, 55, 194, 190, 99, 125, 201, 0, 100, 205, 170, 180, 7, 110, 159, 128, 164, 62, 11, 179, 141, 22, 131, 184, 106, 41, 90, 154, 116, 0, 73, 237, 109, 23, 138, 173, 221, 23, 125, 203, 37, 132, 52, 173, 161, 36, 172, 76, 249, 132, 69, 53, 64, 35, 122, 147, 234, 65, 216, 84, 196, 152, 50, 1, 240, 8, 79, 231, 7, 231, 220, 46, 154, 222, 22, 199, 150, 52, 171, 232, 53, 248, 230, 66, 17, 54, 178, 198, 169, 139, 244, 240, 106, 96, 149, 10, 156, 52, 45, 19, 53, 71, 25, 167, 58, 46, 201, 111, 207, 54, 203, 183, 218, 46, 186, 127, 213, 34, 177, 202, 228, 132, 114, 112, 39, 123, 196, 219, 160, 16, 18, 19, 92, 219, 184, 33, 87, 88, 36, 97, 125, 90, 167, 116, 228, 20, 40, 32, 233, 42, 38, 101, 107, 206, 146, 172, 42, 117, 177, 113, 180, 152, 20, 88, 4, 220, 145, 90, 149, 120, 77, 25, 217, 79, 42, 53, 13, 85, 245, 128, 104, 184, 119, 92, 84, 183, 0, 18, 218, 107, 69, 43, 147, 123, 148, 80, 14, 136, 80, 187, 58, 23, 174, 94, 146, 176, 104, 47, 84, 176, 19, 2, 102, 255, 15, 89, 238, 1, 231, 186, 222, 204, 76, 150, 100, 65, 11, 0, 190, 64, 167, 135],
            }
        );
        Ok(())
    }

    #[test]
    fn test_canonicalize_already_canonical() -> Result<()> {
        let canonical = canonicalize(IN_RELEASE)?;
        assert_eq!(canonical, IN_RELEASE);
        Ok(())
    }

    #[test]
    fn test_canonicalize_strip_version() -> Result<()> {
        let canonical = canonicalize(b"-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Origin: . xenial
Label: . xenial
Suite: xenial
Codename: xenial
Date: Thu, 2 Feb 2023 21:39:16 UTC
Architectures: amd64
Components: main
Description: Generated by aptly
MD5Sum:
 8550d0ce5fda03a2f3eb8c735a571bd5     4778 main/Contents-amd64.gz
 d8c35b55bc8e48e267b9ccdaf383976d       85 main/binary-amd64/Release
 2951333500c011d2b22c01de46d43223   128744 main/binary-amd64/Packages
 444ef6562bb0ffef2b40af15d2a1e10d    20921 main/binary-amd64/Packages.gz
 69ac9fed864b2f51c2a5fec9f8584724    17345 main/binary-amd64/Packages.bz2
SHA1:
 56bddab49c82340b09c4e83e469e4042061bffa4     4778 main/Contents-amd64.gz
 992cb9cd8a0af2d9ad81d2b45342656d41157202       85 main/binary-amd64/Release
 c8be9dfb45580a4ff22f5afb0bff311458ae9dd7   128744 main/binary-amd64/Packages
 0c82b553b566704273b4be3e3e08326f9ce7f936    20921 main/binary-amd64/Packages.gz
 56e0d8810a31b18c6ae46001e08948fbffb20ebb    17345 main/binary-amd64/Packages.bz2
SHA256:
 138a02cd93856c8e8ee0bfd3c558e9306607a7f0fb84609f70c566dcfe65c918     4778 main/Contents-amd64.gz
 e593f5bb98e0b6dbf5d0636ebff298b905b98a00402e2b20173fdb5da85c46d9       85 main/binary-amd64/Release
 1e1b1c2e00f0beda7787e81a4b9f838a6ff9cb9866d8f0060adfe066805e1963   128744 main/binary-amd64/Packages
 50e12a9696e82d0126328341b6e44b6fdad4459e8a53d94beb5d619d1b80c262    20921 main/binary-amd64/Packages.gz
 3498ef94ef0967a7384014c6930aea9e3604595435e3f3baf579d3388f89ad26    17345 main/binary-amd64/Packages.bz2
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJj3C2FAAoJENmAoXRX9vsGtugP/Rzx0JWWASJJU8Ki7NC3B725
VuwHoW7tup+LEn0RdaIfVrPPAC0fRmbg4hju7nnQofeq9NEwrCsytHDqnQCvEvp4
zz3pK7PDUW18AdYZvnI5CX4iGx7PX2hPbBUnGCRs0OY8netMVqBJbRW43hsjvkaW
ZOIl330mxXAGEC2ajRWlzef6stYILGVxuLOUunraIk+jDAU+lGZMaZHO9pqBuJ9p
MFwGCb/TR5v9f/ORtX/nl5RII59ryFoVmOdLc18d/p72zIREwCY4P4mLxDZzQMRe
EZf1RFhm/F6wl+rJx5ZVa30AmY5L9O1C7Uc/chO6hceNoJEbe9FxMumrX66yFTIv
zGTl43pZCqLFyrKzucKeW8+mljrDkoplN8K+Y33JAGTNqrQHbp+ApD4Ls40Wg7hq
KVqadABJ7W0Xiq3dF33LJYQ0raEkrEz5hEU1QCN6k+pB2FTEmDIB8AhP5wfn3C6a
3hbHljSr6DX45kIRNrLGqYv08GpglQqcNC0TNUcZpzouyW/PNsu32i66f9Uiscrk
hHJwJ3vE26AQEhNc27ghV1gkYX1ap3TkFCgg6SomZWvOkqwqdbFxtJgUWATckVqV
eE0Z2U8qNQ1V9YBouHdcVLcAEtprRSuTe5RQDohQuzoXrl6SsGgvVLATAmb/D1nu
Aee63sxMlmRBCwC+QKeH
=zXvj
-----END PGP SIGNATURE-----
")?;
        assert_eq!(canonical, IN_RELEASE);
        Ok(())
    }
}
